/**
 * @ClassName 无符号右移运算符
 * @Description
 * 1。
 * >>：带符号右移。正数右移高位补0，负数右移高位补1。比如：
 *
 * 4 >> 1，结果是2；-4 >> 1，结果是-2。-2 >> 1，结果是-1。
 *
 * >>>：无符号右移。无论是正数还是负数，高位通通补0。
 *
 * 对于正数而言，>>和>>>没区别。
 *
 * 对于负数而言，-2 >>> 1，结果是2147483647（Integer.MAX_VALUE），-1 >>> 1，结果是2147483647（Integer.MAX_VALUE）。
 *
 * 以下代码可以判断两个数的符号是否相等
 *
 * return ((a >> 31) ^ (b >> 31)) == 0;
 *
 *
 *
 *
 * 2。
 * 左移<< ： 就是该数对应二进制码整体左移 ， 左边超出的部分舍弃 ， 右边补零 。
        * 举个例子 ： 2 5 3 的二进制码11111101， 在经过运算253<<2 后得到11110100,很简单.
        *
        //右移>> ：该数对应的二进制码整体右移，左边的用原有标志位补充，右边超出的部分舍弃。
 *
 * 无符号右移>>> ：不管正负标志位为0还是1，将该数的二进制码整体右移，左边部分总是以0填充，右边部分舍弃。
 *
 * 举例对比：
 *
 * 8位二进制
 * -3 原码10000011 反码11111100 补码 11111101
 * -5 原码10000101 反码11111010 补码 11111011
 *
 * -5用二进制表示11111011
 *
 * -5>>2: 1111 1011-------------->1111 1110。
 *
 * 11为标志位
 *
 * -5>>>2:  1111 1011-------------->0011 1110。
 *
 * 00为补充的0
 *
 * @Author Bruce
 * @Date 2020/8/2 8:24 下午
 */
public class 无符号右移运算符 {
    public static void main(String[] args) {
        System.out.println(-2>>>1);
        System.out.println(Integer.MAX_VALUE);
    }
}
