/**
 * @ClassName JZ31整数中1出现的次数_从1到n整数
 * @Description 查找 数学
 * 题目描述
 * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
 * 但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
 * <p>
 * 解题：
 * 归纳个位上1出现的个数为：
 * n/10 * 1+(n%10!=0 ? 1 : 0)
 * <p>
 * <p>
 * 十位数上出现1的情况应该是10-19，依然沿用分析个位数时候的阶梯理论，我们知道10-19这组数，每隔100出现一次，这次我们的阶梯是100，
 * 例如数字317，分析有阶梯0-99，100-199，200-299三段完整阶梯，每一段阶梯里面都会出现10次1（从10-19），最后分析露出来的那段不完整的阶梯。
 * 我们考虑如果露出来的数大于19，那么直接算10个1就行了，因为10-19肯定会出现；如果小于10，那么肯定不会出现十位数的1；
 * 如果在10-19之间的，我们计算结果应该是k - 10 + 1。例如我们分析300-317，17个数字，1出现的个数应该是17-10+1=8个。
 * 归纳十位上1出现的个数为：
 * 设k = n % 100，即为不完整阶梯段的数字
 * 归纳式为：(n / 100) * 10 + (if(k > 19) 10 else if(k < 10) 0 else k - 10 + 1)
 * <p>
 * 归纳百位上出现1的个数：
 * 设k = n % 1000
 * 归纳式为：(n / 1000) * 100 + (if(k >199) 100 else if(k < 100) 0 else k - 100 + 1)
 * @Author Bruce
 * @Date 2020/7/24 12:02 下午
 */
public class JZ31整数中1出现的次数_从1到n整数 {

    public static void main(String[] args) {
        System.out.println(new JZ31整数中1出现的次数_从1到n整数().NumberOf1Between1AndN_Solution(13));
    }

    public int NumberOf1Between1AndN_Solution(int n) {
        if (n <= 0) {
            return 0;
        }
        int count = 0;
        for (int i = 1; i <= n; i *= 10) {
            int l = i * 10;
            count += (n / l) * i + Math.min(Math.max(n % l - i + 1, 0), i);
        }
        return count;
    }
}
